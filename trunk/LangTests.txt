use Std
use Assert
use Console

#Basic Existence Checks
def BasicExistence() {
  assert.exists(abs$)		#in Std
  assert.doesNotExist(testF$)

  def testF() { print 'hello world' }

  assert.exists(testF$)		#function definition
  assert.returns('hello world', testF())	#side-effect function returns

  assert.doesNotExist(testNum$)
  assert.exists(String$)
 
  testNum = 123
  assert.exists(testNum$)
  free(testNum$)
  assert.doesNotExist(testNum$)
  testNum = 321   #test GC in next function
}

def Operations() {
  assert.doesNotExist(testNum$)		#test garbage collection after scope-change
  testNum = 123

  #cannot add number and function  
  assert.hadException('type mismatch', def() {
    return testNum + abs		
  })
  
  #Test Recursion
  def myFactorial(x) {
    if x == 1 { return 1 }
    else { return x * myFactorial(x-1) }
  }
  assert.returns(120, myFactorial(5))
  
  #test built-in operators against types
  assert.isTrue( "123123" == (123 + "123"), "string/number addition")
  assert.isFalse( 246 == (123 + "123"), "string/number addition (2)")
  assert.isTrue( {1,2} + 3 + "hello" == {1,2,3,'hello'}, "list/value addition")
  assert.isFalse( {1,2} + 3 + "hello" == {1,2,3}, "list/value addition (2)")
  assert.isTrue( {1,2} + {3,4} == {1,2,3,4}, "list addition")
  
  assert.isTrue( "hello world!" - 'world' == 'hello !', "list/value subtraction")
  assert.isTrue( {1,2,3,4} - {3, 2} == {1,4}, "list subtraction")
  assert.isTrue( {1,2,3, 3, 4} - {3, 2} == {1,4}, "list subtraction (2)")
  
  assert.isTrue( "bob" * 3 == "bobbobbob", "string/number multiplication")
  assert.isTrue( {1,2} * 2 == {1,2,1,2}, "list/number multiplication")
  
  assert.isTrue( "bunch of words" / " " == {'bunch', 'of', 'words'}, "string division")
  assert.isTrue( {1,2,3,4} / {2,4,5,6} == {2,4}, "list division")
  assert.isTrue( '1,2|3' / {',', '|'} == {1,2,3}, "string/list division")
  
  #Function type
  F = myFactorial
  assert.isTrue((type(F) == Function), "Function Type (2)")
  assert.returns(120, F(5))

  #Type Mismatch
  assert.hadException('assignment type mismatch', def() { F = 123 })
  assert.isTrue((type(F) == Function), "Function Type (3)")
}

def ControlFlow() {
  #if
  X = 123
  if true { X = 42 }
  assert.returns(42, X)
  
  if true { X = 256 }
  else { X = 123 }
  assert.returns(256, X)
  
  if false { X = 42 }
  else { X = 123 }
  assert.returns(123, X)
  
  #while
  X = 0
  L = {}
  while X < 10 {
    L = L + X
    X = X + 1
  }
  assert.returns({0,1,2,3,4,5,6,7,8,9}, L)
  assert.returns(10, X)

  L = {}
  while len(L) < 9 { L = L + (len(L) + 1) }
  assert.returns({1,2,3,4,5,6,7,8,9}, L)
  
  #for
  L = {2,2,2,2}
  X = 0
  for item in L { X = X + item }
  assert.returns(8, X)
  
  for item in L { item = item + 1 }
  assert.returns({3,3,3,3}, L)
  
  #select
  F = def(S) {
    X = 0
    select S {
      option "One" { X = 1 }
      option "Two" { X = 2 }
      option else  { X = 3 }
	}
    return X
  }
  
  assert.returns(1, F("One"))
  assert.returns(2, F("Two"))
  assert.returns(3, F("hello world"))
  
  #break
  X = 0
  while true {
    X = X + 1
    if X == 5 { break }
    if X > 5 { assert.notCalled("break test 1") }
  }
  assert.returns(5, X)
  
  L = {1,2,3,4,5,6,7,8}
  X = 0
  for item in L {
    cont = true
    while cont {
      if item == 4 { break twice }
      X = item
	  cont = false
	}
  }
  assert.returns(3, X)
}

def ListIndexing() {
	L = {1,2,3,4,5, 6, 7,8} 
	assert.returns(1, L[0])
	
	assert.returns(8, L[-1])
	assert.returns(7, L[-2])
	assert.returns(5, L[4])

	assert.returns({2,3,4}, L[1 to 3])
	assert.returns({4,3,2}, L[3 to 1])
	assert.returns({2,3,4}, -L[3 to 1])
}

def BugFixes(){
  L = '1,2|3' / {',', '|'}
  assert.returns(3, len(L))
  assert.isTrue((L == {1,2,3}), "Not eating ',' in lists")
  
  #different bug
  assert.isFalse((L == {1,3,2}), "List Comparison")

  #strange for loop execution bug
  L = {1,2,3,4,5}
  X = 0
  for item in L {
    if item == 3 { break }
    X = item
  }
  assert.returns(2, X)
  
  assert.returns("MLC works", ("MLC" + #> multi line comment
	here <# " works"))
  
  #Assignment-as-expression
  X = 1   Y = 2
  if((Z = X - Y) > 0) { assert.notCalled("subtraction is broken??") }
  assert.returns(-1, Z)
}

#Execution starts here
cls()
print "---- Starting Tests ----
"

Tests = { BasicExistence, Operations, ControlFlow, ListIndexing, BugFixes }

for test in Tests { 
	print test
	test()
}

print "
---- Tests complete! ----"