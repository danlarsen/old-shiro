use HttpInternal

# helper constants and classes
StatusOk = '200 OK'

# If the callback returns one of these, you can apply special settings to
#  the response.  If you just return a string it returns it as the default.
class ResponseDetails = {
	Body: '',
	Status: StatusOk,
	ContentType: 'text/plain',
	ResponseDetails: def(body, isHtml is Bool) {
		Body = body
		if isHtml { ContentType = "text/html" }
	}
}

# options for callback:
#	()				: Obvious
#   (uri)			: Full URI passed in
#   (path, qs)		: Path and QueryString passed in

def httpStart(port is Number, callback is Function) {
	httpStartInt(port, callback)
}

def httpStartMapToObject(port is Number, objectMap is Object) {
	callback = def(path, queryString) {
		pathElements = path / '/'
		element = objectMap

		for ele in pathElements {
			convert element = element[ele]
		}

		if element is Function {
			return element(queryString)
		} else {
			return element
		}
	}
	httpStart(port, callback)
}

#This is so fucking cool...
def demoHttp() {
	httpStart(8081, def(uri) {
		if uri == '/end' { httpStop() }
		else { return new ResponseDetails("<html><body><b>hello world</b></body></html>", true) }
	})
}